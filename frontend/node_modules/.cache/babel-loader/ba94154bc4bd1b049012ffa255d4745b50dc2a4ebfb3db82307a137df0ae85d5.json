{"ast":null,"code":"// Chargement du state depuis le local storage\nexport const loadStateLocalStorage = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\n// Chargement du state depuis le session storage\nexport const loadStateSessionStorage = () => {\n  try {\n    const serializedState = sessionStorage.getItem('state');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\n// Sauvegarde du state dans le storage du navigateur:\n//    - local si \"Remember me\" coché (type === true)\n//    - session si \"Remember me\" décoché\nexport const saveState = (type, state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    type ? localStorage.setItem('state', serializedState) : sessionStorage.setItem('state', serializedState);\n  } catch {\n    // ignorer les erreurs d'écriture\n  }\n};\n\n// Effacement du state dans le local et session storage\nexport const removeState = () => {\n  sessionStorage.removeItem('state');\n  localStorage.removeItem('state');\n};","map":{"version":3,"names":["loadStateLocalStorage","serializedState","localStorage","getItem","undefined","JSON","parse","err","loadStateSessionStorage","sessionStorage","saveState","type","state","stringify","setItem","removeState","removeItem"],"sources":["/Users/kemalkazanc/Desktop/OpenClass/Projet13/frontend/src/utils/stateStorageFunctions.js"],"sourcesContent":["// Chargement du state depuis le local storage\nexport const loadStateLocalStorage = () => {\n  try {\n    const serializedState = localStorage.getItem('state')\n    if (serializedState === null) {\n      return undefined\n    }\n    return JSON.parse(serializedState)\n  } catch (err) {\n    return undefined\n  }\n}\n\n// Chargement du state depuis le session storage\nexport const loadStateSessionStorage = () => {\n  try {\n    const serializedState = sessionStorage.getItem('state')\n    if (serializedState === null) {\n      return undefined\n    }\n    return JSON.parse(serializedState)\n  } catch (err) {\n    return undefined\n  }\n}\n\n// Sauvegarde du state dans le storage du navigateur:\n//    - local si \"Remember me\" coché (type === true)\n//    - session si \"Remember me\" décoché\nexport const saveState = (type, state) => {\n  try {\n    const serializedState = JSON.stringify(state)\n    type\n      ? localStorage.setItem('state', serializedState)\n      : sessionStorage.setItem('state', serializedState)\n  } catch {\n    // ignorer les erreurs d'écriture\n  }\n}\n\n// Effacement du state dans le local et session storage\nexport const removeState = () => {\n  sessionStorage.removeItem('state')\n  localStorage.removeItem('state')\n}\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,qBAAqB,GAAGA,CAAA,KAAM;EACzC,IAAI;IACF,MAAMC,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACrD,IAAIF,eAAe,KAAK,IAAI,EAAE;MAC5B,OAAOG,SAAS;IAClB;IACA,OAAOC,IAAI,CAACC,KAAK,CAACL,eAAe,CAAC;EACpC,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZ,OAAOH,SAAS;EAClB;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,uBAAuB,GAAGA,CAAA,KAAM;EAC3C,IAAI;IACF,MAAMP,eAAe,GAAGQ,cAAc,CAACN,OAAO,CAAC,OAAO,CAAC;IACvD,IAAIF,eAAe,KAAK,IAAI,EAAE;MAC5B,OAAOG,SAAS;IAClB;IACA,OAAOC,IAAI,CAACC,KAAK,CAACL,eAAe,CAAC;EACpC,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZ,OAAOH,SAAS;EAClB;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMM,SAAS,GAAGA,CAACC,IAAI,EAAEC,KAAK,KAAK;EACxC,IAAI;IACF,MAAMX,eAAe,GAAGI,IAAI,CAACQ,SAAS,CAACD,KAAK,CAAC;IAC7CD,IAAI,GACAT,YAAY,CAACY,OAAO,CAAC,OAAO,EAAEb,eAAe,CAAC,GAC9CQ,cAAc,CAACK,OAAO,CAAC,OAAO,EAAEb,eAAe,CAAC;EACtD,CAAC,CAAC,MAAM;IACN;EAAA;AAEJ,CAAC;;AAED;AACA,OAAO,MAAMc,WAAW,GAAGA,CAAA,KAAM;EAC/BN,cAAc,CAACO,UAAU,CAAC,OAAO,CAAC;EAClCd,YAAY,CAACc,UAAU,CAAC,OAAO,CAAC;AAClC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}