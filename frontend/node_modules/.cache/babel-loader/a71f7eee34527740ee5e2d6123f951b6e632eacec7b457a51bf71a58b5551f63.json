{"ast":null,"code":"import axios from 'axios';\nimport { setTokenStorage, getTokenStorage } from '../utils/tokenStorageFunctions';\nconst API_URL = 'http://localhost:3001/api/v1/user/';\n\n// Page Login : Authentification de l'utilisateur par email et mot de passe,\nexport const serviceLogin = async (email, password, isRememberMe) => {\n  return await axios.post(API_URL + 'login', {\n    email: email,\n    password: password\n  }).then(response => {\n    if (response.data.body.token) {\n      const token = JSON.stringify(response.data.body.token);\n      // mémorisation du token dans le storage du navigateur\n      setTokenStorage(isRememberMe, token);\n    }\n  });\n};\n\n// Page Profile : Récupération  du prénom et du nom dans la base de données\nexport const serviceGetUserProfile = async (dataUserProfile, isRememberMe) => {\n  const token = JSON.parse(getTokenStorage(isRememberMe));\n  // recupération du token depuis le storage du navigateur et implémentation dans le header pour autorisation\n  const headerConfig = {\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  };\n  return await axios.post(API_URL + 'profile', dataUserProfile, headerConfig).then(response => {\n    // retourne les données de l'utilisateur\n    return response.data.body;\n  });\n};\n\n// Page Profile : Mise à jour du prénom et du nom dans la base de données\nexport const serviceUpdateUserProfile = async (updateData, isRememberMe) => {\n  const token = JSON.parse(getTokenStorage(isRememberMe));\n  // recupération du token depuis le storage du navigateur et utilisation dans le header pour autorisation\n  const headerConfig = {\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  };\n  return await axios.put(API_URL + 'profile', updateData, headerConfig).then(response => {\n    // retourne les données modifiées de l'utilisateur\n    return response.data.body;\n  });\n};","map":{"version":3,"names":["axios","setTokenStorage","getTokenStorage","API_URL","serviceLogin","email","password","isRememberMe","post","then","response","data","body","token","JSON","stringify","serviceGetUserProfile","dataUserProfile","parse","headerConfig","headers","Accept","Authorization","serviceUpdateUserProfile","updateData","put"],"sources":["/Users/kemalkazanc/Desktop/OpenClass/Projet13/frontend/src/services/auth.service.js"],"sourcesContent":["import axios from 'axios'\nimport {\n  setTokenStorage,\n  getTokenStorage,\n} from '../utils/tokenStorageFunctions'\n\nconst API_URL = 'http://localhost:3001/api/v1/user/'\n\n// Page Login : Authentification de l'utilisateur par email et mot de passe,\nexport const serviceLogin = async (email, password, isRememberMe) => {\n  return await axios\n    .post(API_URL + 'login', {\n      email: email,\n      password: password,\n    })\n    .then((response) => {\n      if (response.data.body.token) {\n        const token = JSON.stringify(response.data.body.token)\n        // mémorisation du token dans le storage du navigateur\n        setTokenStorage(isRememberMe, token)\n      }\n    })\n}\n\n// Page Profile : Récupération  du prénom et du nom dans la base de données\nexport const serviceGetUserProfile = async (dataUserProfile, isRememberMe) => {\n  const token = JSON.parse(getTokenStorage(isRememberMe))\n  // recupération du token depuis le storage du navigateur et implémentation dans le header pour autorisation\n  const headerConfig = {\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n  }\n  return await axios\n    .post(API_URL + 'profile', dataUserProfile, headerConfig)\n    .then((response) => {\n      // retourne les données de l'utilisateur\n      return response.data.body\n    })\n}\n\n// Page Profile : Mise à jour du prénom et du nom dans la base de données\nexport const serviceUpdateUserProfile = async (updateData, isRememberMe) => {\n  const token = JSON.parse(getTokenStorage(isRememberMe))\n  // recupération du token depuis le storage du navigateur et utilisation dans le header pour autorisation\n  const headerConfig = {\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n  }\n\n  return await axios\n    .put(API_URL + 'profile', updateData, headerConfig)\n    .then((response) => {\n      // retourne les données modifiées de l'utilisateur\n      return response.data.body\n    })\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACEC,eAAe,EACfC,eAAe,QACV,gCAAgC;AAEvC,MAAMC,OAAO,GAAG,oCAAoC;;AAEpD;AACA,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,YAAY,KAAK;EACnE,OAAO,MAAMP,KAAK,CACfQ,IAAI,CAACL,OAAO,GAAG,OAAO,EAAE;IACvBE,KAAK,EAAEA,KAAK;IACZC,QAAQ,EAAEA;EACZ,CAAC,CAAC,CACDG,IAAI,CAAEC,QAAQ,IAAK;IAClB,IAAIA,QAAQ,CAACC,IAAI,CAACC,IAAI,CAACC,KAAK,EAAE;MAC5B,MAAMA,KAAK,GAAGC,IAAI,CAACC,SAAS,CAACL,QAAQ,CAACC,IAAI,CAACC,IAAI,CAACC,KAAK,CAAC;MACtD;MACAZ,eAAe,CAACM,YAAY,EAAEM,KAAK,CAAC;IACtC;EACF,CAAC,CAAC;AACN,CAAC;;AAED;AACA,OAAO,MAAMG,qBAAqB,GAAG,MAAAA,CAAOC,eAAe,EAAEV,YAAY,KAAK;EAC5E,MAAMM,KAAK,GAAGC,IAAI,CAACI,KAAK,CAAChB,eAAe,CAACK,YAAY,CAAC,CAAC;EACvD;EACA,MAAMY,YAAY,GAAG;IACnBC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAG,UAAST,KAAM;IACjC;EACF,CAAC;EACD,OAAO,MAAMb,KAAK,CACfQ,IAAI,CAACL,OAAO,GAAG,SAAS,EAAEc,eAAe,EAAEE,YAAY,CAAC,CACxDV,IAAI,CAAEC,QAAQ,IAAK;IAClB;IACA,OAAOA,QAAQ,CAACC,IAAI,CAACC,IAAI;EAC3B,CAAC,CAAC;AACN,CAAC;;AAED;AACA,OAAO,MAAMW,wBAAwB,GAAG,MAAAA,CAAOC,UAAU,EAAEjB,YAAY,KAAK;EAC1E,MAAMM,KAAK,GAAGC,IAAI,CAACI,KAAK,CAAChB,eAAe,CAACK,YAAY,CAAC,CAAC;EACvD;EACA,MAAMY,YAAY,GAAG;IACnBC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAG,UAAST,KAAM;IACjC;EACF,CAAC;EAED,OAAO,MAAMb,KAAK,CACfyB,GAAG,CAACtB,OAAO,GAAG,SAAS,EAAEqB,UAAU,EAAEL,YAAY,CAAC,CAClDV,IAAI,CAAEC,QAAQ,IAAK;IAClB;IACA,OAAOA,QAAQ,CAACC,IAAI,CAACC,IAAI;EAC3B,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}